#include<iostream>
    using namespace std;

    struct node{
        int key;
        node *left;
        node *right;
        int maxheight = 1;
        int minheight = 1;

        node (int k){
            key = k;
            left = NULL;
            right = NULL;
            minheight = 1;
            maxheight = 1;
        }
    };

    class heap{
        node* root;
        public:
            heap(): root (NULL){}

            heap (heap *A){
                root = copy(A->root);
                }

            void pop(){
                root = popp(root);
            }

            void push(int k){
                root = ppush(root,k);
            }

            int findmax(){
                cout << "Max. el. is: "<< endl;
                return (root -> key);
            }

            void update(int k){
                root -> key = k;
                sort(root,1);
            }

            void print(){
                cout << "Your heap-tree is: "<< endl;
                pprint(root);
            }

            node* copy (node* temp){
                if (temp == NULL)
                    return NULL;

                node* A = new node(temp -> key);
                A -> left = copy(temp -> left);
                A -> right = copy(temp -> right);
                return A;
            }

            int balfactor(node *temp, int k){
                if (temp == NULL)
                    return 0;
                else
                    if (k == 0)
                        return height(temp -> left,0) - height(temp -> right,0);
                    else
                        return height(temp -> left,1) - height(temp -> right,1);
            }

            int height(node *temp, int k) {
            if (temp == NULL)
                return 0;
            else
                if (k == 0)
                    return temp -> maxheight;
                else
                    return temp -> minheight;
            }


            node* ppush(node* temp, int key){
                if (temp == NULL)
                    return new node(key);

                if (balfactor(temp,1) == 0)
                    temp -> left  = ppush(temp -> left, key);
                else
                    temp -> right = ppush(temp -> right, key);

                temp -> minheight = 1 + min(height(temp -> left,1), height(temp -> right,1));
                temp -> maxheight = 1 + max(height(temp -> left,0), height(temp -> right,0));
                sort(temp,0);
                return temp;
            }

            node* popp(node* temp){
                if (root == NULL)
                    return 0;
                if (root -> left == NULL && root -> right == NULL)
                    return 0;
                if (root -> left -> left == NULL){
                    if (root -> right != NULL){
                        root -> right -> left = root -> left;
                        root -> left = NULL;
                        root = root -> right;
                        root -> right = NULL;
                    }
                    else{
                        temp = root -> left;
                        root -> left = NULL;
                        delete root;
                        root = temp;
                    }
                    return root;
                }
                if (height(temp -> left,0)> 1 || height(temp -> right,0) > 1){
                    if (balfactor (temp,1) == 0){
                        temp -> right = popp (temp -> right);
                        if (temp -> right == root -> right){
                            temp = root;
                            sort(temp,1);
                        }
                    }
                    else{
                        temp -> left = popp (temp -> left);
                        if (temp -> left == root -> left){
                            temp = root;
                            sort(temp,1);
                        }
                    }
                }
                if (temp -> right == NULL){
                    if (temp -> left -> left == NULL && temp != root){
                        temp -> left -> left = root -> left;
                        root -> left = NULL;
                        temp -> left -> right = root -> right;
                        root -> right = NULL;
                        root = NULL;
                        root = temp -> left;
                        temp -> left = NULL;
                    }
                }
                else{
                    if (temp -> right -> left == NULL && temp != root){
                        temp -> right -> left = root -> left;
                        root -> left = NULL;
                        temp -> right -> right = root -> right;
                        root -> right = NULL;
                        root = NULL;
                        root = temp -> right;
                        temp -> right = NULL;
                    }
                }
                temp -> minheight = 1 + min(height(temp -> left,1), height(temp -> right,1));
                temp -> maxheight = 1 + max(height(temp -> left,0), height(temp -> right,0));
            return temp;
            }


            void sort(node* q,int k){
                if (k == 1){
                while (q -> left && q -> right){
                    if (q -> right -> key <= q -> left -> key){
                        swap (q -> key, q -> left -> key);
                        q = q -> left;
                    }
                    else {
                        swap (q -> key, q -> right -> key);
                        q = q -> right;
                    }
                }
                }
                if (q -> left)
                    if (q -> left -> key >= q -> key)
                        swap (q -> key, q -> left -> key);
                if (q -> right)
                    if (q -> right -> key >= q -> key)
                        swap (q -> key, q -> right -> key);
            }

             node* pprint(node* temp){
                 if (root){
                    if (temp == root)
                        cout << "root: " << temp -> key << endl;
                    else
                        cout << temp -> key << endl;
                    if(temp -> left != NULL){
                        cout << "left: ";
                        pprint(temp -> left);
                    }
                    else
                        cout << "left: 0" << endl;
                    if(temp -> right != NULL){
                        cout << "right: ";
                        pprint(temp -> right);
                    }
                    else cout << "right: 0"<< endl;
                    return 0;
                 }
                 else cout << " really?";
                 return 0;
            }

            node* deleteall(node *temp){
            if (root){
                if(temp -> right -> right)
                    deleteall(temp -> right);
                if(temp -> left -> right)
                    deleteall(temp -> left);
                temp -> right == NULL;
                temp -> left == NULL;
            }
            }

            ~heap(){
                deleteall(root);
                root == NULL;
            }

    };





    int main(){
        heap tree;
        
        tree.push (6);
        tree.push(2);
        tree.push(3);
        tree.push(3);
        tree.push(8);
        tree.push(9);
        tree.push(10);
        tree.update (7);
        tree.print();
        tree.findmax();
        tree.pop();
        tree.pop();
        tree.pop();
        tree.print();

        heap A(tree);
        A.print();
        return 0;

    }
