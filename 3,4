#include <iostream>
using namespace std;

struct Heap {
    int SIZE; // максимальный размер кучи
    int *value;         // указатель на массив кучи
    int HeapSize; // размер кучи

    Heap(int n) {
        value = new int[n];
        SIZE = n;
        HeapSize = 0;
    }

    Heap(const Heap &A){
        HeapSize = 0;
        SIZE = A.SIZE;
        value = new int[SIZE];
        for (int i = 0; i < A.HeapSize; i++){
            addelem(A.value[i]);
        }
    }


    void addelem(int n) {
        int i = HeapSize, parent;
        value[i] = n;
        parent = (i - 1)/2;
        while(parent >= 0 && i > 0){
            if(value[i] > value[parent])
                swap(value[i],value[parent]);
            i = parent;
            parent = (i - 1) / 2;
        }
        HeapSize++;
    }

    void outHeap() {
        int i = 0;
        int k = 1;
            while(i < HeapSize) {
                while((i < k) && (i < HeapSize)) {
                    cout << value[i] << " ";
                    i++;
                }
                cout << endl;
                k = k * 2 + 1;
            }
    }

    void out() {
        for(int i=0; i < HeapSize; i++) {
            cout << value[i] << " ";
        }
        cout << endl;
    }

    int findmax(){
        int x = value[0];
        return(x);
    }

    int getmax() {
        int x = value[0];
        value[0] = value[HeapSize-1];
        HeapSize--;
        siftUp(0);
        return(x);
    }

    void siftUp(int i) {
        int left, right;
        left = 2 * i + 1;
        right = 2 * i + 2;
            if(left < HeapSize) {
                if(value[i] < value[left]) {
                    swap(value[i],value[left]);
                    siftUp(left);
                }
            }
            if(right < HeapSize) {
                if(value[i] < value[right]) {
                    swap(value[i],value[right]);
                    siftUp(right);
                }
            }
    }


};

Heap Merge(Heap A, Heap B){ /* слияние двух куч */
    Heap C(A);
    for (int i = 0; i < B.HeapSize; i++){
        C.addelem(B.value[i]);
    }
    return C;
}

void Sort(int *Array, int size_array){
    Heap A(size_array);
    for (int i = 0; i < size_array; i++){
        A.addelem(Array[i]);
    }
    for (int i = size_array - 1; i >= 0; i--){
        Array[i] = A.getmax();
    }
}

int main(){
    int k;
    cout << "Enter the number of elements ";
    cin >> k;
    Heap B(k);
    int A[k];
    for(int i = 0; i < k; i++) {
        cout << "Enter the element " << i+1 << ": ";
        cin >> A[i];
        B.addelem(A[i]);
    }
    B.outHeap();
    cout << "MAX is: " << B.getmax();

    return 0;
}
